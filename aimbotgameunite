--// Cache
local select = select
local pcall, getgenv, next, Vector2, mathclamp, type, mousemoverel = select(1, pcall, getgenv, next, Vector2.new, math.clamp, type, mousemoverel or (Input and Input.MouseMove))

--// Preventing Multiple Processes
pcall(function()
	getgenv().Aimbot.Functions:Exit()
end)

--// Environment
getgenv().Aimbot = {}
local Environment = getgenv().Aimbot

--// Services
local RunService, UserInputService, TweenService = game:GetService("RunService"), game:GetService("UserInputService"), game:GetService("TweenService")
local Players, Camera, LocalPlayer, Playermodels = game:GetService("Players"), workspace.CurrentCamera, game:GetService("Players").LocalPlayer, workspace:FindFirstChild("Playermodels")

--// Variables
local RequiredDistance, Typing, Running, Animation, ServiceConnections = 2000, false, false, nil, {}

--// Script Settings
Environment.Settings = {
	Enabled = true,
	TeamCheck = false,
	AliveCheck = true,
	WallCheck = false,
	Sensitivity = 0,
	ThirdPerson = false,
	ThirdPersonSensitivity = 3,
	TriggerKey = "MouseButton2",
	Toggle = false,
	LockPart = "RootPart"
}

Environment.FOVSettings = {
	Enabled = true,
	Visible = true,
	Amount = 90,
	Color = Color3.fromRGB(255, 255, 255),
	LockedColor = Color3.fromRGB(255, 70, 70),
	Transparency = 0.5,
	Sides = 60,
	Thickness = 1,
	Filled = false
}

Environment.FOVCircle = Drawing.new("Circle")

--// Rename Playermodels to Player Names
local function RenamePlayerModels()
	for _, player in ipairs(Players:GetPlayers()) do
		local playerID = tostring(player.UserId)
		local model = Playermodels and Playermodels:FindFirstChild(playerID)
		if model then
			model.Name = player.Name
		end
	end
end

--// Get Closest Player
local function GetClosestPlayer()
	if not Environment.Locked then
		RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Amount or 2000

		for _, player in next, Players:GetPlayers() do
			local character = Playermodels and Playermodels:FindFirstChild(player.Name)
			local rootPart = character and character:FindFirstChild(Environment.Settings.LockPart)
			
			if player ~= LocalPlayer and character and rootPart then
				if Environment.Settings.TeamCheck and player.Team == LocalPlayer.Team then continue end
				if Environment.Settings.AliveCheck and character:FindFirstChildOfClass("Humanoid") and character:FindFirstChildOfClass("Humanoid").Health <= 0 then continue end
				if Environment.Settings.WallCheck and #Camera:GetPartsObscuringTarget({rootPart.Position}, character:GetDescendants()) > 0 then continue end

				local Vector, OnScreen = Camera:WorldToViewportPoint(rootPart.Position)
				local Distance = (Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2(Vector.X, Vector.Y)).Magnitude

				if Distance < RequiredDistance and OnScreen then
					RequiredDistance = Distance
					Environment.Locked = player
				end
			end
		end
	elseif (Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2(Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position).X, Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position).Y)).Magnitude > RequiredDistance then
		Environment.Locked = nil
	end
end

--// Typing Check
ServiceConnections.TypingStartedConnection = UserInputService.TextBoxFocused:Connect(function() Typing = true end)
ServiceConnections.TypingEndedConnection = UserInputService.TextBoxFocusReleased:Connect(function() Typing = false end)

--// Main
local function Load()
	ServiceConnections.RenderSteppedConnection = RunService.RenderStepped:Connect(function()
		Environment.FOVCircle.Visible = Environment.FOVSettings.Enabled and Environment.Settings.Enabled
		Environment.FOVCircle.Radius = Environment.FOVSettings.Amount
		Environment.FOVCircle.Thickness = Environment.FOVSettings.Thickness
		Environment.FOVCircle.Filled = Environment.FOVSettings.Filled
		Environment.FOVCircle.NumSides = Environment.FOVSettings.Sides
		Environment.FOVCircle.Color = Environment.FOVSettings.Color
		Environment.FOVCircle.Transparency = Environment.FOVSettings.Transparency
		Environment.FOVCircle.Position = Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)

		if Running and Environment.Settings.Enabled then
			GetClosestPlayer()

			if Environment.Locked then
				local character = Playermodels and Playermodels:FindFirstChild(Environment.Locked.Name)
				local rootPart = character and character:FindFirstChild(Environment.Settings.LockPart)

				if rootPart then
					if Environment.Settings.ThirdPerson then
						local Vector = Camera:WorldToViewportPoint(rootPart.Position)
						mousemoverel((Vector.X - UserInputService:GetMouseLocation().X) * Environment.Settings.ThirdPersonSensitivity, (Vector.Y - UserInputService:GetMouseLocation().Y) * Environment.Settings.ThirdPersonSensitivity)
					else
						if Environment.Settings.Sensitivity > 0 then
							Animation = TweenService:Create(Camera, TweenInfo.new(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, rootPart.Position)})
							Animation:Play()
						else
							Camera.CFrame = CFrame.new(Camera.CFrame.Position, rootPart.Position)
						end
					end

					Environment.FOVCircle.Color = Environment.FOVSettings.LockedColor
				end
			end
		end
	end)
end

--// Input Events
ServiceConnections.InputBeganConnection = UserInputService.InputBegan:Connect(function(Input)
	if not Typing then
		if Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] or Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
			if Environment.Settings.Toggle then
				Running = not Running
				if not Running then Environment.Locked = nil end
			else
				Running = true
			end
		end
	end
end)

ServiceConnections.InputEndedConnection = UserInputService.InputEnded:Connect(function(Input)
	if not Typing and not Environment.Settings.Toggle then
		if Input.UserInputType == Enum.UserInputType[Environment.Settings.TriggerKey] or Input.KeyCode == Enum.KeyCode[Environment.Settings.TriggerKey] then
			Running = false
			Environment.Locked = nil
		end
	end
end)

--// Functions
Environment.Functions = {}

function Environment.Functions:Exit()
	for _, v in next, ServiceConnections do v:Disconnect() end
	if Environment.FOVCircle.Remove then Environment.FOVCircle:Remove() end
	getgenv().Aimbot = nil
end

function Environment.Functions:Restart()
	for _, v in next, ServiceConnections do v:Disconnect() end
	Load()
end

function Environment.Functions:ResetSettings()
	Environment.Settings = {
		Enabled = true, TeamCheck = false, AliveCheck = true, WallCheck = false,
		Sensitivity = 0, ThirdPerson = false, ThirdPersonSensitivity = 3,
		TriggerKey = "MouseButton2", Toggle = false, LockPart = "RootPart"
	}

	Environment.FOVSettings = {
		Enabled = true, Visible = true, Amount = 90,
		Color = Color3.fromRGB(255, 255, 255), LockedColor = Color3.fromRGB(255, 70, 70),
		Transparency = 0.5, Sides = 60, Thickness = 1, Filled = false
	}
end

--// Start
RenamePlayerModels()
Load()
